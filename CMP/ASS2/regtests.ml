Printf.printf("\n\n\nRegression tests. The last test message before an exception indicates which test failed.\n\n\n");;
Printf.printf "Test 01: void\nScheme:\n%s\n" "";;
tag_parse Void;;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse Void));;
Printf.printf "Test 02: bool #t\nScheme:\n%s\n" "#t";;
tag_parse (Bool true);;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Bool true)));;
Printf.printf "Test 03: bool #f\nScheme:\n%s\n" "#f";;
tag_parse (Bool false);;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Bool false)));;
Printf.printf "Test 04: number int\nScheme:\n%s\n" "-1";;
tag_parse (Number(Int(-1)));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Number(Int(-1)))));;
Printf.printf "Test 05: number diminished frac\nScheme:\n%s\n" "1/2";;
tag_parse (Number(Fraction{numerator = 1; denominator = 2}));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Number(Fraction{numerator = 1; denominator = 2}))));;
Printf.printf "Test 06: number non-diminished frac\nScheme:\n%s\n" "4/2";;
tag_parse (Number(Fraction{numerator = 4; denominator = 2}));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Number(Fraction{numerator = 4; denominator = 2}))));;
Printf.printf "Test 07: number frac who is actually integer\nScheme:\n%s\n" "3/3";;
tag_parse (Number(Fraction{numerator = 3; denominator = 3}));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Number(Fraction{numerator = 3; denominator = 3}))));;
Printf.printf "Test 08: negative frac, the numerator should be integer and the denominator natural\nScheme:\n%s\n" "-4/7";;
tag_parse (Number(Fraction{numerator = -4; denominator = 7}));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Number(Fraction{numerator = -4; denominator = 7}))));;
Printf.printf "Test 09: char\nScheme:\n%s\n" "#\\k";;
tag_parse (Char('k'));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Char('k'))));;
Printf.printf "Test 10: string\nScheme:\n%s\n" "testing...";;
tag_parse (String("testing..."));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (String("testing..."))));;
Printf.printf "Test 11: vector, should raise X_syntax_error\nScheme:\n%s\n" "#(1 'a #f)";;
(* tag_parse (Vector [(Number (Int 1)); (Pair((Symbol("quote")), (Pair((Symbol("a")), Nil)))); (Bool false)]);; *)
(* Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Vector [(Number (Int 1)); (Pair((Symbol("quote")), (Pair((Symbol("a")), Nil)))); (Bool false)])));; *)
Printf.printf "Test 12: if w/o else clause #t\nScheme:\n%s\n" "(if #t #f)";;
tag_parse (Pair((Symbol("if")), (Pair((Bool true), (Pair((Bool false), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("if")), (Pair((Bool true), (Pair((Bool false), Nil))))))));;
Printf.printf "Test 13: if w/ else clause #f\nScheme:\n%s\n" "(if #t #t 5)";;
tag_parse (Pair((Symbol("if")), (Pair((Bool true), (Pair((Bool true), (Pair((Number (Int 5)), Nil))))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("if")), (Pair((Bool true), (Pair((Bool true), (Pair((Number (Int 5)), Nil))))))))));;
Printf.printf "Test 14a: cond->if macro expansion, w/o else clause\nScheme:\n%s\n" "(cond (1 2) (3 4))";;
tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), Nil))))))));;
Printf.printf "Test 14b: cond->if macro expansion, w/ else clause\nScheme:\n%s\n" "(cond (1 2) (3 4) (else 5))";;
tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 5)), Nil)))), Nil))))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 5)), Nil)))), Nil))))))))));;
Printf.printf "Test 14c: cond->if macro expansion, else clause not last - should fail\nScheme:\n%s\n" "(cond (1 2) (3 4) (else 5) (else 6))";;
(* tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 5)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 6)), Nil)))), Nil))))))))));; *)
(* Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 5)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 6)), Nil)))), Nil))))))))))));; *)
Printf.printf "Test 15: let->lambda application macro expansion\nScheme:\n%s\n" "(let ((x 1) (y 2)) 3)";;
tag_parse (Pair((Symbol("let")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Number (Int 2)), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("let")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Number (Int 2)), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))))));;
Printf.printf "Test 16: let*->let->lambda application macro expansion\nScheme:\n%s\n" "(let* ((x 1) (y x)) 3)";;
tag_parse (Pair((Symbol("let*")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Symbol("x")), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("let*")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Symbol("x")), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))))));;
Printf.printf "Test 17: letrec->let->lambda application macro expansion\nScheme:\n%s\n" "(letrec ((x 1) (y x)) 3)";;
tag_parse (Pair((Symbol("letrec")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Symbol("x")), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("letrec")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Symbol("x")), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))))));;
Printf.printf "Test 18a: lambda simple, one expression in body\nScheme:\n%s\n" "(lambda (x) x)";;
tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), Nil))))))));;
Printf.printf "Test 18b: lambda simple, two or more expressions in body\nScheme:\n%s\n" "(lambda (x) x 1)";;
tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))))));;
Printf.printf "Test 19: lambda optional\nScheme:\n%s\n" "(lambda (x y z . t) x 1)";;
tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), (Pair((Symbol("y")), (Pair((Symbol("z")), (Symbol("t")))))))), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), (Pair((Symbol("y")), (Pair((Symbol("z")), (Symbol("t")))))))), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))))));;
Printf.printf "Test 20: lambda variadic\nScheme:\n%s\n" "(lambda s x 1)";;
tag_parse (Pair((Symbol("lambda")), (Pair((Symbol("s")), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("lambda")), (Pair((Symbol("s")), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))))));;
Printf.printf "Test 21: or\nScheme:\n%s\n" "(or #f 5 #t 5/2)";;
tag_parse (Pair((Symbol("or")), (Pair((Bool false), (Pair((Number (Int 5)), (Pair((Bool true), (Pair((Number (Fraction {numerator = 5; denominator = 2})), Nil))))))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("or")), (Pair((Bool false), (Pair((Number (Int 5)), (Pair((Bool true), (Pair((Number (Fraction {numerator = 5; denominator = 2})), Nil))))))))))));;
Printf.printf "Test 22: and->if macro expansion\nScheme:\n%s\n" "(and #f 1)";;
tag_parse (Pair((Symbol("and")), (Pair((Bool false), (Pair((Number (Int 1)), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("and")), (Pair((Bool false), (Pair((Number (Int 1)), Nil))))))));;
Printf.printf "Test 23: define\nScheme:\n%s\n" "(define x 5)";;
tag_parse (Pair((Symbol("define")), (Pair((Symbol("x")), (Pair((Number (Int 5)), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("define")), (Pair((Symbol("x")), (Pair((Number (Int 5)), Nil))))))));;
Printf.printf "Test 24: MIT-define, lambda simple\nScheme:\n%s\n" "(define (f x) x)";;
tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Pair((Symbol("x")), Nil)))), (Pair((Symbol("x")), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Pair((Symbol("x")), Nil)))), (Pair((Symbol("x")), Nil))))))));;
Printf.printf "Test 25: MIT-define, lambda optional\nScheme:\n%s\n" "(define (f x y . z) x)";;
tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Pair((Symbol("x")), (Pair((Symbol("y")), (Symbol("z")))))))), (Pair((Symbol("x")), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Pair((Symbol("x")), (Pair((Symbol("y")), (Symbol("z")))))))), (Pair((Symbol("x")), Nil))))))));;
Printf.printf "Test 26: MIT-define, lambda variadic\nScheme:\n%s\n" "(define (f . x) x)";;
tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Symbol("x")))), (Pair((Symbol("x")), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Symbol("x")))), (Pair((Symbol("x")), Nil))))))));;
Printf.printf "Test 27: quote\nScheme:\n%s\n" "'a";;
tag_parse (Pair((Symbol("quote")), (Pair((Symbol("a")), Nil))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("quote")), (Pair((Symbol("a")), Nil))))));;
Printf.printf "Test 28: quasiquote\nScheme:\n%s\n" "`x";;
tag_parse (Pair((Symbol("quasiquote")), (Pair((Symbol("x")), Nil))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("quasiquote")), (Pair((Symbol("x")), Nil))))));;
Printf.printf "Test 29: unquote\nScheme:\n%s\n" "`,x";;
tag_parse (Pair((Symbol("quasiquote")), (Pair((Pair((Symbol("unquote")), (Pair((Symbol("x")), Nil)))), Nil))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("quasiquote")), (Pair((Pair((Symbol("unquote")), (Pair((Symbol("x")), Nil)))), Nil))))));;
Printf.printf "Test 30: unquote-splicing\nScheme:\n%s\n" "`(1 2 ,@x)";;
tag_parse (Pair((Symbol("quasiquote")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), (Pair((Pair((Symbol("unquote-splicing")), (Pair((Symbol("x")), Nil)))), Nil)))))), Nil))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("quasiquote")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), (Pair((Pair((Symbol("unquote-splicing")), (Pair((Symbol("x")), Nil)))), Nil)))))), Nil))))));;
Printf.printf "Test 31: plain symbol\nScheme:\n%s\n" "'plain";;
tag_parse (Symbol("plain"));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Symbol("plain"))));;
Printf.printf "Test 32: begin\nScheme:\n%s\n" "(begin (lambda (x) x) #t)";;
tag_parse (Pair((Symbol("begin")), (Pair((Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), Nil)))))), (Pair((Bool true), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("begin")), (Pair((Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), Nil)))))), (Pair((Bool true), Nil))))))));;
Printf.printf "Test 33: set!\nScheme:\n%s\n" "(set! x 10)";;
tag_parse (Pair((Symbol("set!")), (Pair((Symbol("x")), (Pair((Number (Int 10)), Nil))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("set!")), (Pair((Symbol("x")), (Pair((Number (Int 10)), Nil))))))));;
Printf.printf "Test 34: application\nScheme:\n%s\n" "(+ 1 2 3 4)";;
tag_parse (Pair((Symbol("+")), (Pair((Number (Int 1)), (Pair((Number (Int 2)), (Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil))))))))));;
Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse (Pair((Symbol("+")), (Pair((Number (Int 1)), (Pair((Number (Int 2)), (Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil))))))))))));;
Printf.printf "Test 35: \nScheme:\n%s\n" "";;
tag_parse ;;
(* Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse ));; *)
Printf.printf "Test 36: \nScheme:\n%s\n" "";;
tag_parse ;;
(* Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse ));; *)
Printf.printf "Test 37: \nScheme:\n%s\n" "";;
tag_parse ;;
(* Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse ));; *)
Printf.printf "Test 38: \nScheme:\n%s\n" "";;
tag_parse ;;
(* Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse ));; *)
Printf.printf "Test 39: \nScheme:\n%s\n" "";;
tag_parse ;;
(* Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse ));; *)
Printf.printf "Test 40: \nScheme:\n%s\n" "";;
tag_parse ;;
(* Printf.printf "expression_to_string:\n%s\n\n" (expression_to_string (tag_parse ));; *)