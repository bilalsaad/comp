Printf.printf("\n\n\nRegression tests: the test no. and test case are printed before each case. The last test message before an exception indicates which test failed.\n\n\n");;
#use "compiler.ml";;
open Parser;;
open Tag_Parser;;
Printf.printf("Test 01: void\n");;
tag_parse Void;;
Printf.printf("Test 02: bool #t\n");;
tag_parse (Bool true);;
Printf.printf("Test 03: bool #f\n");;
tag_parse (Bool false);;
Printf.printf("Test 04: number int\n");;
tag_parse (Number(Int(-1)));;
Printf.printf("Test 05: number diminished frac\n");;
tag_parse (Number(Fraction{numerator = 1; denominator = 2}));;
Printf.printf("Test 06: number non-diminished frac\n");;
tag_parse (Number(Fraction{numerator = 4; denominator = 2}));;
Printf.printf("Test 07: number frac who is actually integer\n");;
tag_parse (Number(Fraction{numerator = 3; denominator = 3}));;
Printf.printf("Test 08: negative frac, the numerator should be integer and the denominator natural\n");;
tag_parse (Number(Fraction{numerator = -4; denominator = 7}));;
Printf.printf("Test 09: char\n");;
tag_parse (Char('k'));;
Printf.printf("Test 10: string\n");;
tag_parse (String("testing..."));;
Printf.printf("Test 11: vector\n");;
tag_parse (Vector [(Number (Int 1)); (Pair((Symbol("quote")), (Pair((Symbol("a")), Nil)))); (Bool false)]);;
Printf.printf("Test 12: if w/o else clause #t\n");;
tag_parse (Pair((Symbol("if")), (Pair((Bool true), (Pair((Bool false), Nil))))));;
Printf.printf("Test 13: if w/ else clause #f\n");;
tag_parse (Pair((Symbol("if")), (Pair((Bool true), (Pair((Bool true), (Pair((Number (Int 5)), Nil))))))));;
Printf.printf("Test 14a: cond->if macro expansion, w/o else clause\n");;
tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), Nil))))));;
Printf.printf("Test 14b: cond->if macro expansion, w/ else clause\n");;
tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 5)), Nil)))), Nil))))))));;
Printf.printf("Test 14c: cond->if macro expansion, else clause not last - should fail\n");;
(* tag_parse (Pair((Symbol("cond")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), Nil)))), (Pair((Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 5)), Nil)))), (Pair((Pair((Symbol("else")), (Pair((Number (Int 6)), Nil)))), Nil))))))))));; *)
Printf.printf("Test 15: let->lambda application macro expansion\n");;
tag_parse (Pair((Symbol("let")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Number (Int 2)), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))));;
Printf.printf("Test 16: let*->let->lambda application macro expansion\n");;
tag_parse (Pair((Symbol("let*")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Symbol("x")), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))));;
Printf.printf("Test 17: letrec->let->lambda application macro expansion\n");;
tag_parse (Pair((Symbol("letrec")), (Pair((Pair((Pair((Symbol("x")), (Pair((Number (Int 1)), Nil)))), (Pair((Pair((Symbol("y")), (Pair((Symbol("x")), Nil)))), Nil)))), (Pair((Number (Int 3)), Nil))))));;
Printf.printf("Test 18a: lambda simple, one expression in body\n");;
tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), Nil))))));;
Printf.printf("Test 18b: lambda simple, two or more expressions in body\n");;
tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))));;
Printf.printf("Test 19: lambda optional\n");;
tag_parse (Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), (Pair((Symbol("y")), (Pair((Symbol("z")), (Symbol("t")))))))), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))));;
Printf.printf("Test 20: lambda variadic\n");;
tag_parse (Pair((Symbol("lambda")), (Pair((Symbol("s")), (Pair((Symbol("x")), (Pair((Number (Int 1)), Nil))))))));;
Printf.printf("Test 21: or\n");;
tag_parse (Pair((Symbol("or")), (Pair((Bool false), (Pair((Number (Int 5)), (Pair((Bool true), (Pair((Number (Fraction {numerator = 5; denominator = 2})), Nil))))))))));;
Printf.printf("Test 22: and->if macro expansion\n");;
tag_parse (Pair((Symbol("and")), (Pair((Bool false), (Pair((Number (Int 1)), Nil))))));;
Printf.printf("Test 23: define\n");;
tag_parse (Pair((Symbol("define")), (Pair((Symbol("x")), (Pair((Number (Int 5)), Nil))))));;
Printf.printf("Test 24: MIT-define, lambda simple\n");;
tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Pair((Symbol("x")), Nil)))), (Pair((Symbol("x")), Nil))))));;
Printf.printf("Test 25: MIT-define, lambda optional\n");;
tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Pair((Symbol("x")), (Pair((Symbol("y")), (Symbol("z")))))))), (Pair((Symbol("x")), Nil))))));;
Printf.printf("Test 26: MIT-define, lambda variadic\n");;
tag_parse (Pair((Symbol("define")), (Pair((Pair((Symbol("f")), (Symbol("x")))), (Pair((Symbol("x")), Nil))))));;
Printf.printf("Test 27: quote\n");;
tag_parse (Pair((Symbol("quote")), (Pair((Symbol("a")), Nil))));;
Printf.printf("Test 28: quasiquote\n");;
tag_parse (Pair((Symbol("quasiquote")), (Pair((Symbol("x")), Nil))));;
Printf.printf("Test 29: unquote\n");;
tag_parse (Pair((Symbol("quasiquote")), (Pair((Pair((Symbol("unquote")), (Pair((Symbol("x")), Nil)))), Nil))));;
Printf.printf("Test 30: unquote-splicing\n");;
tag_parse (Pair((Symbol("quasiquote")), (Pair((Pair((Number (Int 1)), (Pair((Number (Int 2)), (Pair((Pair((Symbol("unquote-splicing")), (Pair((Symbol("x")), Nil)))), Nil)))))), Nil))));;
Printf.printf("Test 31: plain symbol\n");;
tag_parse (Symbol("plain"));;
Printf.printf("Test 32: begin\n");;
tag_parse (Pair((Symbol("begin")), (Pair((Pair((Symbol("lambda")), (Pair((Pair((Symbol("x")), Nil)), (Pair((Symbol("x")), Nil)))))), (Pair((Bool true), Nil))))));;
Printf.printf("Test 33: set!\n");;
tag_parse (Pair((Symbol("set!")), (Pair((Symbol("x")), (Pair((Number (Int 10)), Nil))))));;
Printf.printf("Test 34: application\n");;
tag_parse (Pair((Symbol("+")), (Pair((Number (Int 1)), (Pair((Number (Int 2)), (Pair((Number (Int 3)), (Pair((Number (Int 4)), Nil))))))))));;
Printf.printf("Test 35: \n");;
tag_parse ;;
Printf.printf("Test 36: \n");;
tag_parse ;;
Printf.printf("Test 37: \n");;
tag_parse ;;
Printf.printf("Test 38: \n");;
tag_parse ;;
Printf.printf("Test 39: \n");;
tag_parse ;;
Printf.printf("Test 40: \n");;
tag_parse ;;
